
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\014\000\002\024" +
    "\003\000\002\024\004\000\002\003\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\025\003\000\002\005\010\000\002" +
    "\005\005\000\002\021\005\000\002\021\006\000\002\020" +
    "\007\000\002\020\010\000\002\020\005\000\002\020\006" +
    "\000\002\020\007\000\002\020\010\000\002\006\006\000" +
    "\002\007\006\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\023\005\000\002\023\007\000\002\023\007" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\010\006\000\002\017" +
    "\003\000\002\017\003\000\002\017\004\000\002\017\004" +
    "\000\002\011\005\000\002\022\005\000\002\022\005\000" +
    "\002\012\007\000\002\013\005\000\002\013\024" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\017\004\001\002\000\004\021\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\023\010\001\002\000\004\005\011\001\002\000" +
    "\004\004\012\001\002\000\004\051\013\001\002\000\016" +
    "\004\uffff\007\uffff\010\uffff\011\uffff\040\uffff\051\013\001" +
    "\002\000\004\004\015\001\002\000\004\022\016\001\002" +
    "\000\004\024\017\001\002\000\022\027\023\034\024\035" +
    "\031\036\022\037\033\041\026\042\042\051\030\001\002" +
    "\000\004\020\021\001\002\000\004\002\000\001\002\000" +
    "\024\025\uffea\027\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\041\uffea\042\uffea\051\uffea\001\002\000\006\026\157\031" +
    "\160\001\002\000\004\006\154\001\002\000\004\025\153" +
    "\001\002\000\004\005\147\001\002\000\024\025\ufff7\027" +
    "\023\034\024\035\031\036\022\037\033\041\026\042\042" +
    "\051\030\001\002\000\026\005\112\025\ufff9\027\023\034" +
    "\024\035\031\036\022\037\033\041\026\042\042\051\030" +
    "\001\002\000\004\006\103\001\002\000\024\025\ufffb\027" +
    "\023\034\024\035\031\036\022\037\033\041\026\042\042" +
    "\051\030\001\002\000\004\051\013\001\002\000\024\025" +
    "\ufff8\027\023\034\024\035\031\036\022\037\033\041\026" +
    "\042\042\051\030\001\002\000\024\025\ufff4\027\023\034" +
    "\024\035\031\036\022\037\033\041\026\042\042\051\030" +
    "\001\002\000\024\025\ufffa\027\023\034\024\035\031\036" +
    "\022\037\033\041\026\042\042\051\030\001\002\000\024" +
    "\025\ufffc\027\023\034\024\035\031\036\022\037\033\041" +
    "\026\042\042\051\030\001\002\000\024\025\ufff5\027\023" +
    "\034\024\035\031\036\022\037\033\041\026\042\042\051" +
    "\030\001\002\000\024\025\ufff6\027\023\034\024\035\031" +
    "\036\022\037\033\041\026\042\042\051\030\001\002\000" +
    "\006\043\044\051\043\001\002\000\004\046\065\001\002" +
    "\000\004\005\045\001\002\000\004\004\046\001\002\000" +
    "\004\051\013\001\002\000\004\004\050\001\002\000\004" +
    "\041\051\001\002\000\004\005\052\001\002\000\004\004" +
    "\053\001\002\000\004\053\054\001\002\000\004\004\055" +
    "\001\002\000\004\044\056\001\002\000\004\014\057\001" +
    "\002\000\004\047\060\001\002\000\004\045\061\001\002" +
    "\000\004\014\062\001\002\000\004\047\063\001\002\000" +
    "\004\046\064\001\002\000\030\025\uffc2\027\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2\042" +
    "\uffc2\051\uffc2\001\002\000\030\025\uffc3\027\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\042" +
    "\uffc3\051\uffc3\001\002\000\004\025\uffed\001\002\000\004" +
    "\025\uffec\001\002\000\004\025\ufff3\001\002\000\004\025" +
    "\ufff1\001\002\000\004\025\uffeb\001\002\000\004\025\uffef" +
    "\001\002\000\004\010\077\001\002\000\004\040\076\001" +
    "\002\000\024\025\uffc7\027\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\041\uffc7\042\uffc7\051\uffc7\001\002\000\004\051" +
    "\013\001\002\000\006\010\077\040\uffc6\001\002\000\004" +
    "\040\uffc5\001\002\000\004\025\ufff2\001\002\000\006\047" +
    "\106\051\104\001\002\000\010\007\uffcb\047\106\051\104" +
    "\001\002\000\004\007\110\001\002\000\010\007\uffca\047" +
    "\106\051\104\001\002\000\004\007\uffc8\001\002\000\024" +
    "\025\uffcc\027\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041" +
    "\uffcc\042\uffcc\051\uffcc\001\002\000\004\007\uffc9\001\002" +
    "\000\014\006\123\043\116\047\120\050\114\051\013\001" +
    "\002\000\004\025\ufff0\001\002\000\020\004\uffdb\007\uffdb" +
    "\011\uffdb\012\133\013\127\015\132\016\130\001\002\000" +
    "\010\004\uffda\007\uffda\011\uffda\001\002\000\010\004\uffd9" +
    "\007\uffd9\011\uffd9\001\002\000\004\011\145\001\002\000" +
    "\020\004\uffdc\007\uffdc\011\uffdc\012\133\013\127\015\132" +
    "\016\130\001\002\000\010\004\uffdd\007\uffdd\011\uffdd\001" +
    "\002\000\010\004\uffd8\007\uffd8\011\uffd8\001\002\000\006" +
    "\047\126\050\124\001\002\000\012\012\133\013\127\015" +
    "\132\016\130\001\002\000\004\007\136\001\002\000\012" +
    "\012\133\013\127\015\132\016\130\001\002\000\006\047" +
    "\uffcf\050\uffcf\001\002\000\006\047\uffcd\050\uffcd\001\002" +
    "\000\006\047\135\050\134\001\002\000\006\047\uffce\050" +
    "\uffce\001\002\000\006\047\uffd0\050\uffd0\001\002\000\010" +
    "\004\uffd2\007\uffd2\011\uffd2\001\002\000\010\004\uffd4\007" +
    "\uffd4\011\uffd4\001\002\000\020\004\uffd7\007\uffd7\011\uffd7" +
    "\012\133\013\127\015\132\016\130\001\002\000\006\047" +
    "\141\050\140\001\002\000\010\004\uffd5\007\uffd5\011\uffd5" +
    "\001\002\000\010\004\uffd6\007\uffd6\011\uffd6\001\002\000" +
    "\006\047\144\050\143\001\002\000\010\004\uffd3\007\uffd3" +
    "\011\uffd3\001\002\000\010\004\uffd1\007\uffd1\011\uffd1\001" +
    "\002\000\024\025\uffdf\027\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\041\uffdf\042\uffdf\051\uffdf\001\002\000\004\025" +
    "\uffee\001\002\000\004\004\150\001\002\000\004\053\151" +
    "\001\002\000\004\004\152\001\002\000\024\025\uffc4\027" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\041\uffc4\042\uffc4" +
    "\051\uffc4\001\002\000\004\020\ufffd\001\002\000\014\006" +
    "\123\043\116\047\120\050\114\051\013\001\002\000\004" +
    "\007\156\001\002\000\024\025\uffde\027\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\041\uffde\042\uffde\051\uffde\001\002" +
    "\000\004\005\201\001\002\000\004\033\164\001\002\000" +
    "\004\030\162\001\002\000\024\025\uffe8\027\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\041\uffe8\042\uffe8\051\uffe8\001" +
    "\002\000\004\032\177\001\002\000\004\005\165\001\002" +
    "\000\006\004\167\042\042\001\002\000\006\032\uffe3\033" +
    "\164\001\002\000\016\006\123\043\116\047\120\050\114" +
    "\051\013\052\171\001\002\000\004\004\174\001\002\000" +
    "\004\004\172\001\002\000\006\032\uffe1\033\164\001\002" +
    "\000\004\032\uffe0\001\002\000\006\032\uffe5\033\164\001" +
    "\002\000\004\032\uffe4\001\002\000\004\032\uffe2\001\002" +
    "\000\006\030\uffe7\031\160\001\002\000\004\030\uffe6\001" +
    "\002\000\004\047\202\001\002\000\004\031\160\001\002" +
    "\000\004\030\204\001\002\000\024\025\uffe9\027\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\041\uffe9\042\uffe9\051\uffe9" +
    "\001\002\000\014\004\ufffe\007\ufffe\010\ufffe\011\ufffe\040" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\013\001\001\000" +
    "\004\024\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\017\001\001\000\024\004\024\005\036\006" +
    "\031\007\035\010\033\011\026\012\040\013\037\025\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\145\005\036\006" +
    "\031\007\035\010\033\011\026\012\040\013\037\025\034" +
    "\001\001\000\024\004\112\005\036\006\031\007\035\010" +
    "\033\011\026\012\040\013\037\025\034\001\001\000\002" +
    "\001\001\000\024\004\101\005\036\006\031\007\035\010" +
    "\033\011\026\012\040\013\037\025\034\001\001\000\006" +
    "\022\074\024\073\001\001\000\024\004\072\005\036\006" +
    "\031\007\035\010\033\011\026\012\040\013\037\025\034" +
    "\001\001\000\024\004\071\005\036\006\031\007\035\010" +
    "\033\011\026\012\040\013\037\025\034\001\001\000\024" +
    "\004\070\005\036\006\031\007\035\010\033\011\026\012" +
    "\040\013\037\025\034\001\001\000\024\004\067\005\036" +
    "\006\031\007\035\010\033\011\026\012\040\013\037\025" +
    "\034\001\001\000\024\004\066\005\036\006\031\007\035" +
    "\010\033\011\026\012\040\013\037\025\034\001\001\000" +
    "\024\004\065\005\036\006\031\007\035\010\033\011\026" +
    "\012\040\013\037\025\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\100" +
    "\024\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\104\001\001\000\004\017\110" +
    "\001\001\000\002\001\001\000\004\017\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\116\015\114\023\121\024\120\001\001\000\002\001" +
    "\001\000\004\016\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\124\001\001" +
    "\000\004\016\141\001\001\000\002\001\001\000\004\016" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\154\015\114\023\121\024\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\165\001\001\000\004" +
    "\020\175\001\001\000\012\014\167\015\114\023\121\024" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\172\001\001\000\002\001\001\000\004\020\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio_Html Inicio_Encabezado Et_Titulo Sign_Igual Sign_Comillas DATOSS Sign_Comillas Fin_Encabezado CUERPO Fin_Html 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    resultado = "<html>\n"+ "<head>\n"+ "<title> "+ a + "</title>\n"+ "</head>\n" + b + "\n</html>";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DATOSS ::= Datos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOSS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DATOSS ::= Datos DATOSS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a) + " " + String.valueOf(b);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOSS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= Inicio_Cuerpo OPCIONES Fin_Cuerpo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = "<body>\n" + String.valueOf(a) + "\n</body>";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPCIONES ::= TABLA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(a);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPCIONES ::= VARIABLE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(b);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPCIONES ::= NEGRITA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(c);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPCIONES ::= Datos 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(d) + "<br>";
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPCIONES ::= IMPRESION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(e);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPCIONES ::= LISTA 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(f);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPCIONES ::= DIRECCION_WEB 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(g);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPCIONES ::= IMAGEN 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(h);
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPCIONES ::= SALTO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(i);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPCIONES ::= TABLA OPCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(a) + "\n" + String.valueOf(aa);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPCIONES ::= VARIABLE OPCIONES 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(b) + "\n" + String.valueOf(bb);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPCIONES ::= NEGRITA OPCIONES 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(c) + "\n" + String.valueOf(cc);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPCIONES ::= Datos OPCIONES 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(d) + "<br>" + "\n" + String.valueOf(dd);
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPCIONES ::= IMPRESION OPCIONES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(e) + "\n" + String.valueOf(ee);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPCIONES ::= LISTA OPCIONES 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(f) + "\n" + String.valueOf(ff);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPCIONES ::= DIRECCION_WEB OPCIONES 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ggleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ggright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(g) + "\n" + String.valueOf(gg);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPCIONES ::= IMAGEN OPCIONES 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hhright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(h) + "\n" + String.valueOf(hh);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPCIONES ::= SALTO OPCIONES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ii = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = String.valueOf(i) + "\n" + String.valueOf(ii);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SALTO ::= Salto_Linea 
            {
              Object RESULT =null;
		
        RESULT = "<br>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SALTO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TABLA ::= Inicio_Tabla Tab_Borde Sign_Igual Num_Int FILAS Fin_Tabla 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = "<table Borde=\"" + String.valueOf(a) + "\">\n" + String.valueOf(b) + "</table>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TABLA ::= Inicio_Tabla FILAS Fin_Tabla 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = "<table>\n" + String.valueOf(c) + "\n<table>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TABLA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FILAS ::= Inicio_Fila RELLENO Fin_Fila 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = "\n<tr>" + String.valueOf(a) + "</tr>";
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FILAS ::= Inicio_Fila RELLENO Fin_Fila FILAS 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "\n<tr>" + String.valueOf(b) + "</tr>" + String.valueOf(c);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RELLENO ::= Nue_Columna Sign_Igual Sign_Comillas CONTENIDO Sign_Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = "<td>" + String.valueOf(a) + "</td>";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELLENO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RELLENO ::= Nue_Columna Sign_Igual Sign_Comillas CONTENIDO Sign_Comillas RELLENO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "<td>" + String.valueOf(a) + "</td>" + String.valueOf(b);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELLENO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RELLENO ::= Nue_Columna Sign_Igual IMAGEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "<td>" + String.valueOf(a) + "</td>";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELLENO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RELLENO ::= Nue_Columna Sign_Igual IMAGEN RELLENO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "<td>" + String.valueOf(a) + "</td>" + String.valueOf(b);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELLENO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RELLENO ::= Nue_Columna Sign_Igual Sign_Comillas Correo Sign_Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = "<td>" + String.valueOf(a) + "</td>";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELLENO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RELLENO ::= Nue_Columna Sign_Igual Sign_Comillas Correo Sign_Comillas RELLENO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "<td>" + String.valueOf(a) + "</td>" + String.valueOf(b);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELLENO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VARIABLE ::= Datos Sign_Igual CONTENIDO Punto_Coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = String.valueOf(a) + "=" + String.valueOf(b) + ";";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NEGRITA ::= Fuent_Negrita Abrir_LLave CONTENIDO Cerrar_LLave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = "<b>" + String.valueOf(a) + "</b><br>";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NEGRITA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDO ::= DATOSS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDO ::= Num_Int 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(b);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTENIDO ::= Num_Float 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(c);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTENIDO ::= OPERACION_MAT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(d);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONTENIDO ::= Nombre_Imagen 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(e);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONTENIDO ::= OPERACION_COMPUESTA 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(f);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION_COMPUESTA ::= Abrir_LLave OPERACION_MAT Cerrar_LLave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = "(" + String.valueOf(a) + ")";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION_COMPUESTA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION_COMPUESTA ::= Abrir_LLave OPERACION_MAT Cerrar_LLave SIGNO Num_Int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "(" + String.valueOf(a) + ")" + String.valueOf(b) + String.valueOf(c);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION_COMPUESTA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION_COMPUESTA ::= Abrir_LLave OPERACION_MAT Cerrar_LLave SIGNO Num_Float 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "(" + String.valueOf(a) + ")" + String.valueOf(b) + String.valueOf(c);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION_COMPUESTA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_MAT ::= Num_Int SIGNO Num_Int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a) + String.valueOf(b) + String.valueOf(c);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_MAT ::= Num_Float SIGNO Num_Float 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a) + String.valueOf(b) + String.valueOf(c);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_MAT ::= Num_Int SIGNO Num_Float 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a) + String.valueOf(b) + String.valueOf(c);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_MAT ::= Num_Float SIGNO Num_Int 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a) + String.valueOf(b) + String.valueOf(c);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION_MAT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIGNO ::= Op_Suma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIGNO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIGNO ::= Op_Resta 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(b);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIGNO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIGNO ::= Op_Producto 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(c);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIGNO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIGNO ::= Op_Division 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(d);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIGNO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IMPRESION ::= Ins_Imprimir Abrir_LLave POSIBLES Cerrar_LLave 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = "<p>" + String.valueOf(a) + "</p>";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // POSIBLES ::= Datos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSIBLES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // POSIBLES ::= Num_Int 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(b);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSIBLES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // POSIBLES ::= Datos POSIBLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a) + String.valueOf(b);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSIBLES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // POSIBLES ::= Num_Int POSIBLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = String.valueOf(a) + String.valueOf(b);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSIBLES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA ::= Inicio_Lista LISTA_DATOSS Fin_Lista 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = "<ul>" + String.valueOf(a) + "</ul>";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_DATOSS ::= DATOSS Sign_Coma DATOSS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "<li>" + String.valueOf(a) + "</li>" + "<li>" + String.valueOf(b) + "</li>";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DATOSS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_DATOSS ::= DATOSS Sign_Coma LISTA_DATOSS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "<li>" + String.valueOf(a) + "</li>" + String.valueOf(b);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_DATOSS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DIRECCION_WEB ::= Et_Enlace Sign_Igual Sign_Comillas Webpage Sign_Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT ="<a href=\"" + String.valueOf(a) + "\">" + "</a>";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIRECCION_WEB",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IMAGEN ::= Inicio_Imagen Datos Fin_Imagen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT ="<img src=\"" + String.valueOf(a) +"\">";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IMAGEN ::= Inicio_Imagen Nombre_Imagen Sign_Igual Sign_Comillas DATOSS Sign_Comillas Et_Enlace Sign_Igual Sign_Comillas Webpage Sign_Comillas Et_Ancho Dos_puntos Num_Int Et_Alto Dos_puntos Num_Int Fin_Imagen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT ="<img src=\"" + String.valueOf(b) + "\" alt=\"" + String.valueOf(a) + "\" Ancho=\"" + String.valueOf(c) + 
"\" Alto=\"" + String.valueOf(d) + "\">";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMAGEN",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
